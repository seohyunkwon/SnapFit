package com.ssafy.snapfit.controller;

import java.net.http.HttpRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.HttpStatusCode;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ssafy.snapfit.model.dto.Member;
import com.ssafy.snapfit.security.JwtUtil;
import com.ssafy.snapfit.service.MemberService;

@RestController
public class MemberController {
	
	@Autowired
	private final MemberService memberService;
	
	private final Logger logger = LoggerFactory.getLogger(MemberController.class);
	
	@Autowired
	private final JwtUtil jwtUtil;

	public MemberController(MemberService memberService, JwtUtil jwtUtil) {
		this.memberService = memberService;
		this.jwtUtil = jwtUtil;
	}

	@PostMapping("/signup")
	public ResponseEntity<?> signup(@RequestBody Member member) {
		if(memberService.signup(member)) {
			return new ResponseEntity<Void>(HttpStatus.CREATED);
		}
		
		return new ResponseEntity<Void>(HttpStatus.BAD_REQUEST);
	}
	
	@PostMapping("/login")
	public ResponseEntity<?> login(@RequestBody Member member) {
	    // 사용자 인증 로직을 수행하여 인증이 성공하면 토큰을 생성한다고 가정
	    // 실제로는 사용자 정보와 비밀번호를 기반으로 사용자를 검증하고 토큰을 생성해야 함
	    String token = jwtUtil.createToken(member);
	    
	    // 토큰을 응답에 포함하여 클라이언트에게 반환
	    return ResponseEntity.ok().header("Authorization", "Bearer " + token).build();
	}

	
	@GetMapping("/member/{id}")
	public ResponseEntity<?> getMember(@PathVariable String id) {
		Member member = memberService.findMemberById(id);
		if(member == null) {
			return new ResponseEntity<Void>(HttpStatus.NO_CONTENT);
		}
		return new ResponseEntity<Member>(member, HttpStatus.OK);
	}
	
}
