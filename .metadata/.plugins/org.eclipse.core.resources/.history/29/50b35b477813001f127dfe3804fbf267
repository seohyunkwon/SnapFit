package com.ssafy.snapfit.security;

import java.io.IOException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.OncePerRequestFilter;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

public class JwtFilter extends OncePerRequestFilter {
	
	private static final String AUTHORIZATION_HEADER = "Authorization";
	private static final String BEARER_PREFIX = "Bearer ";
	
	@Autowired
	private final JwtUtil jwtUtil;
	
	public JwtFilter(JwtUtil jwtUtil) {
		this.jwtUtil = jwtUtil;
	}

	// 필터링 로직
	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException, SecurityException,
			MalformedJwtException, ExpiredJwtException, IllegalArgumentException {
		
		// 1. Request Header에서 토큰 꺼내기
		String jwt = resolveToken(request);
		
		// 2. validateToken으로 유효성 검사
		if(StringUtils.hasText(jwt) && jwtUtil.validateToken(jwt)) {
			Authentication authentication = jwtUtil.autenticate(jwt);
			SecurityContextHolder.getContext().setAuthentication(authentication);;
		}
		
		filterChain.doFilter(request, response);
		
	}
	
	// Request Header에서 토큰 정보 꺼내오기
	private String resolveToken(HttpServletRequest request) {
		String bearerToken = request.getHeader(AUTHORIZATION_HEADER);
		if(StringUtils.hasText(bearerToken) && bearerToken.startsWith(BEARER_PREFIX)) {
			return bearerToken.substring(7);
		}
		return null;
	}

}
