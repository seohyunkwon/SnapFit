package com.ssafy.snapfit.security;

import java.io.IOException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.util.StringUtils;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.ssafy.snapfit.model.dto.Member;

import jakarta.servlet.FilterChain;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

public class JwtFilter extends UsernamePasswordAuthenticationFilter {

    private static final Logger logger = LoggerFactory.getLogger(JwtFilter.class);

    private final JwtUtil jwtUtil;

    public JwtFilter(JwtUtil jwtUtil) {
        this.jwtUtil = jwtUtil;
    }

    @Override
    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) {
    	logger.info("JwtAuthenticationFilter 로그인 : 진입");

        // 로그인 요청 시 들어온 데이터를 객체로 변환
        ObjectMapper objectMapper = new ObjectMapper();
        Member member = null;

        try {
            member = objectMapper.readValue(request.getInputStream(), Member.class);
        } catch (Exception e) {
            logger.error("Failed to parse login data", e);
            return null;
        }

        logger.info("member = {}", member);
        
        
        return
                new UsernamePasswordAuthenticationToken(member.getId(), member.getPassword());
    }

    @Override
    protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response,
                                            FilterChain chain, Authentication authResult) throws IOException {
        String id = ((String) authResult.getPrincipal()).getUsername();
        Member member = new Member();
        member.setId(id);
        String token = jwtUtil.createToken(member);
        response.addHeader("Authorization", "Bearer " + token);
        response.getWriter().write("{\"token\":\"" + token + "\"}");
        response.getWriter().flush();
    }

    @Override
    protected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response,
                                              org.springframework.security.core.AuthenticationException failed)
            throws IOException {
        logger.error("Failed authentication attempt", failed);
        response.sendError(HttpServletResponse.SC_UNAUTHORIZED, "Authentication failed");
    }

//    @Override
//    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
//            throws IOException {
//        String token = resolveToken(request);
//        if (StringUtils.hasText(token) && jwtUtil.validateToken(token)) {
//            Claims claims = jwtUtil.getUserInfoFromToken(token);
//            String id = claims.getSubject();
//            String role = claims.get("role", String.class);
//            UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(
//                    id,
//                    null,
//                    Collections.singleton(new SimpleGrantedAuthority(role))
//            );
//            authenticationToken.setDetails(token);
//            SecurityContextHolder.getContext().setAuthentication(authenticationToken);
//        }
//        filterChain.doFilter(request, response);
//    }

    private String resolveToken(HttpServletRequest request) {
        String bearerToken = request.getHeader("Authorization");
        if (StringUtils.hasText(bearerToken) && bearerToken.startsWith("Bearer ")) {
            return bearerToken.substring(7);
        }
        return null;
    }
}
