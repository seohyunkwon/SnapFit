package com.ssafy.snapfit.security;

import java.io.IOException;
import java.security.SignatureException;
import java.util.Collections;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.util.StringUtils;
import org.springframework.web.filter.OncePerRequestFilter;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.ssafy.snapfit.model.dto.Member;

import io.jsonwebtoken.Claims;
import jakarta.servlet.FilterChain;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

public class JwtFilter extends OncePerRequestFilter {

    private static final Logger logger = LoggerFactory.getLogger(JwtFilter.class);

    private final JwtUtil jwtUtil;

    public JwtFilter(JwtUtil jwtUtil) {
        this.jwtUtil = jwtUtil;
    }

    

    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
            throws IOException {
        String token = resolveToken(request);
        try {
			if (StringUtils.hasText(token) && jwtUtil.validateToken(token)) {
			    Claims claims = jwtUtil.getUserInfoFromToken(token);
			    String id = claims.getSubject();
			    String role = claims.get("role", String.class);
			    UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(
			            id,
			            null,
			            Collections.singleton(new SimpleGrantedAuthority(role))
			    );
			    authenticationToken.setDetails(token);
			    filterChain.doFilter(request, response);
			}
		} catch (SignatureException e) {
			logger.error("doFilter error", e);
			e.printStackTrace();
		}
    }

    private String resolveToken(HttpServletRequest request) {
        String bearerToken = request.getHeader("Authorization");
        if (StringUtils.hasText(bearerToken) && bearerToken.startsWith("Bearer ")) {
            return bearerToken.substring(7);
        }
        return null;
    }
}
