package com.ssafy.fit.controller;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ssafy.fit.model.dto.Review;
import com.ssafy.fit.model.service.ReviewService;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.tags.Tag;

@RestController
@RequestMapping("/api-review")
@Tag(name ="ReviewRestController", description = "리뷰 CRUD")
public class ReviewController {

	private final ReviewService reviewService;
	
	public ReviewController(ReviewService reviewService) {
		this.reviewService = reviewService;
	}
	
	// 비디오에 맞는 전체 리뷰 목록 가져오기
	@GetMapping("/review/all/{videoId}")
	@Operation(summary = "리뷰 목록 조회", description = "비디오 아이디에 따른 리뷰 목록을 조회한다.")
	public ResponseEntity<?> list(@Parameter(description = "비디오 아이디") @PathVariable("videoId") String videoId){
		List<Review> list = reviewService.getReviewListByVideoId(videoId);
		if (list == null || list.size() == 0) {
			return new ResponseEntity<Void>(HttpStatus.NO_CONTENT);
		}
		return new ResponseEntity<List<Review>>(list, HttpStatus.OK);
	}
	
	// 상세 리뷰 가져오기
	@GetMapping("/review/{reviewId}")
	@Operation(summary = "상세 리뷰 조회", description = "상세 리뷰를 조회한다.")
	public ResponseEntity<?> detail(@Parameter(description = "리뷰 아이디") @PathVariable("reviewId") int reviewId){
		Review review = reviewService.getReview(reviewId);
		if (review == null) {
			return new ResponseEntity<Void>(HttpStatus.NO_CONTENT);
		}
		return new ResponseEntity<Review>(review, HttpStatus.OK);
	}
	
	// 리뷰 작성
	@PostMapping("/review")
	@Operation(summary = "리뷰 작성", description = "리뷰를 입력 받아 DB에 입력한다.")
	public ResponseEntity<Void> write(@Parameter(description = "입력받은 리뷰") @RequestBody Review review){
		int result = reviewService.writeReview(review);
		if(result == 0) {
			// 실패했을 때
			return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		}
		// 성공했을 때
		return new ResponseEntity<>(HttpStatus.CREATED);
	}
	
	// 리뷰 수정
	@PutMapping("/review/{reviewId}")
	@Operation(summary = "리뷰 수정", description = "리뷰를 입력받아 리뷰를 수정한다.")
	public ResponseEntity<Void> modify(@Parameter(description = "리뷰 아이디") @PathVariable("reviewId") int reviewId, 
			@Parameter(description = "입력받은 리뷰") @RequestBody Review review) {
		int result = reviewService.modifyReview(reviewId, review);
		if (result == 0) {
			// 실패했을 때
			return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		}
		return new ResponseEntity<>(HttpStatus.OK);
	}
	
	// 리뷰 삭제
	@DeleteMapping("/review/{reviewId}") // 방식이 달라도 ㄱㅊ
	@Operation(summary = "리뷰 삭제", description = "리뷰 아이디를 입력받아 리뷰를 삭제한다.")
	public ResponseEntity<Void> remove(@Parameter(description = "리뷰 아이디") @PathVariable("reviewId") int reviewId){
		int result = reviewService.removeReview(reviewId);
		if (result == 0) {
			// 실패했을 때
			return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
		}
		// 성공했을 때
		return new ResponseEntity<>(HttpStatus.OK);
	}
}
