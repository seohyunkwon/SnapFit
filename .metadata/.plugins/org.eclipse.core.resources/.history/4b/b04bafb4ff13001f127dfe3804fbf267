package com.ssafy.snapfit.security;

import java.io.IOException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.util.StringUtils;

import jakarta.servlet.FilterChain;
import jakarta.servlet.GenericFilter;
import jakarta.servlet.ServletException;
import jakarta.servlet.ServletRequest;
import jakarta.servlet.ServletResponse;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

public class JwtFilter extends GenericFilter {

	private final JwtUtil jwtUtil;
	private final Logger logger = LoggerFactory.getLogger(JwtFilter.class);

	public JwtFilter(JwtUtil jwtUtil) {
		this.jwtUtil = jwtUtil;
	}

	private String resolveToken(HttpServletRequest request) {
		String bearerToken = request.getHeader("Authorization");
		if (StringUtils.hasText(bearerToken) && bearerToken.startsWith("Bearer ")) {
			return bearerToken.substring(7);
		}
		return null;
	}

	@Override
	public void doFilter(ServletRequest req, ServletResponse response, FilterChain chain)
			throws IOException, ServletException {
		HttpServletRequest request = (HttpServletRequest) req;
		String token = resolveToken(request);
		String requestURI = request.getRequestURI();
		System.out.println("token = "+token);
		if (StringUtils.hasText(token) && jwtUtil.validateToken(token)) {
			Authentication authentication = jwtUtil.autenticate(token);
			SecurityContextHolder.getContext().setAuthentication(authentication);

			logger.info("Security Context에 '{}' 인증 정보를 저장했습니다, uri: {}", authentication.getName(), requestURI);
		} else {
			logger.info("유효한 JWT 토큰이 없습니다. requestURI : {}", requestURI);
		}

		chain.doFilter(request, response);		
	}
}
